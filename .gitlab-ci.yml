stages:
  - install
  - build
  - test
  - deploy

image: node:18

cache:
  paths:
    - Backend/node_modules/
    - Frontend/node_modules/


install_dependencies:
  stage: install
  script:
    - echo "Installing dependencies for Backend..."
    - cd Backend && npm install && cd ..
    - echo "Installing dependencies for Frontend..."
    - cd Frontend && npm install && cd ..
  artifacts:
    paths:
      - Backend/node_modules/
      - Frontend/node_modules/
    expire_in: 1 week


build_project:
  stage: build
  script:
    - echo "Building Frontend..."
    - cd Frontend
    - npm run build
    - cd ..
    - echo "Building Backend (if necessary)..."
    - cd Backend
    - if [ -f "package.json" ] && grep -q "\"build\"" package.json; then npm run build; else echo "No build script found for Backend, skipping."; fi
    - cd ..
  artifacts:
    paths:
      - Frontend/dist/
    expire_in: 1 week
    when: always


test_project:
  stage: test
  script:
    - echo "Running tests..."
    - cd Backend
    - if npm test; then echo "Backend tests passed!"; else echo "No tests or failed tests, continuing..."; fi
    - cd ../Frontend
    - if npm test; then echo "Frontend tests passed!"; else echo "No tests or failed tests, continuing..."; fi
  allow_failure: true


deploy:
  stage: deploy
  script:
    - echo "ðŸš€ Starting deployment..."

    # --- FRONTEND DEPLOYMENT (VERCEL) ---
    - echo "Deploying Frontend to Vercel..."
    - npm install -g vercel
    - cd Frontend
    # Set a valid project name explicitly to avoid 400 error
    - vercel --name "panchhi-frontend" --prod --yes --token=$VERCEL_TOKEN
    - cd ..

    # --- BACKEND DEPLOYMENT (RENDER) ---
    - echo "Deploying Backend to Render..."
    - |
      curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
      -H "accept: application/json" \
      -H "authorization: Bearer $RENDER_API_KEY"

  environment:
    name: production

  only:
    - main


